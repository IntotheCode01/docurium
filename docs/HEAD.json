{"files":[{"lines":121,"file":"blob.h","meta":{"file":"git2/blob.h","brief":"Git blob load and write routines","defgroup":"git_blob Git blob load and write routines","ingroup":"Git"},"functions":["git_blob_lookup","git_blob_close","git_blob_rawcontent","git_blob_rawsize","git_blob_create_fromfile","git_blob_create_frombuffer"]},{"lines":302,"file":"commit.h","meta":{"file":"git2/commit.h","brief":"Git commit parsing, formatting routines","defgroup":"git_commit Git commit parsing, formatting routines","ingroup":"Git"},"functions":["git_commit_lookup","git_commit_close","git_commit_id","git_commit_message_short","git_commit_message","git_commit_time","git_commit_time_offset","git_commit_committer","git_commit_author","git_commit_tree","git_commit_tree_oid","git_commit_parentcount","git_commit_parent","git_commit_parent_oid","git_commit_create","git_commit_create_o","git_commit_create_ov","git_commit_create_v"]},{"lines":98,"file":"common.h","meta":{"file":"git2/common.h","brief":"Git common platform definitions","defgroup":"git_common Git common platform definitions","ingroup":"Git"},"functions":["__attribute__","__attribute__","git_strarray_free"]},{"lines":149,"file":"errors.h","meta":{"file":"git2/errors.h","brief":"Git error handling routines and variables","defgroup":null,"ingroup":"Git"},"functions":["git_lasterror","git_strerror"]},{"lines":270,"file":"index.h","meta":{"file":"git2/index.h","brief":"Git index parsing and manipulation routines","defgroup":"git_index Git index parsing and manipulation routines","ingroup":"Git"},"functions":["git_index_open_bare","git_index_open_inrepo","git_index_clear","git_index_free","git_index_read","git_index_write","git_index_find","git_index_add","git_index_append","git_index_remove","git_index_get","git_index_entrycount"]},{"lines":147,"file":"object.h","meta":{"file":"git2/object.h","brief":"Git revision object management routines","defgroup":"git_object Git revision object management routines","ingroup":"Git"},"functions":["git_object_lookup","git_object_id","git_object_type","git_object_owner","git_object_close","git_object_typeisloose","git_object__size"]},{"lines":302,"file":"odb.h","meta":{"file":"git2/odb.h","brief":"Git object database routines","defgroup":"git_odb Git object database routines","ingroup":"Git"},"functions":["git_odb_new","git_odb_open","git_odb_add_backend","git_odb_add_alternate","git_odb_close","git_odb_read","git_odb_read_header","git_odb_exists","git_odb_write","git_odb_open_wstream","git_odb_open_rstream","git_odb_hash","git_odb_object_close","git_odb_object_id","git_odb_object_data","git_odb_object_size","git_odb_object_type"]},{"lines":107,"file":"odb_backend.h","meta":{"file":"git2/backend.h","brief":"Git custom backend functions","defgroup":"git_backend Git custom backend API","ingroup":"Git"},"functions":["git_odb_backend_pack"]},{"lines":191,"file":"oid.h","meta":{"file":"git2/oid.h","brief":"Git object id routines","defgroup":"git_oid Git object id routines","ingroup":"Git"},"functions":["git_oid_mkstr","git_oid_mkraw","git_oid_fmt","git_oid_pathfmt","git_oid_allocfmt","git_oid_to_string","git_oid_cpy","git_oid_cmp","git_oid_shorten_add","git_oid_shorten_free"]},{"lines":325,"file":"refs.h","meta":{"file":"git2/refs.h","brief":"Git reference management routines","defgroup":"git_reference Git reference management routines","ingroup":"Git"},"functions":["git_reference_lookup","git_reference_create_symbolic","git_reference_create_symbolic_f","git_reference_create_oid","git_reference_create_oid_f","git_reference_oid","git_reference_target","git_reference_type","git_reference_name","git_reference_resolve","git_reference_owner","git_reference_set_target","git_reference_set_oid","git_reference_rename","git_reference_rename_f","git_reference_delete","git_reference_packall","git_reference_listall","git_reference_listcb"]},{"lines":217,"file":"repository.h","meta":{"file":"git2/repository.h","brief":"Git repository management routines","defgroup":"git_repository Git repository management routines","ingroup":"Git"},"functions":["git_repository_open","git_repository_database","git_repository_index","git_repository_free","git_repository_init","git_repository_is_empty","git_repository_path","git_repository_workdir"]},{"lines":187,"file":"revwalk.h","meta":{"file":"git2/revwalk.h","brief":"Git revision traversal routines","defgroup":"git_revwalk Git revision traversal routines","ingroup":"Git"},"functions":["git_revwalk_new","git_revwalk_reset","git_revwalk_push","git_revwalk_hide","git_revwalk_next","git_revwalk_sorting","git_revwalk_free","git_revwalk_repository"]},{"lines":81,"file":"signature.h","meta":{"file":"git2/signature.h","brief":"Git signature creation","defgroup":"git_signature Git signature creation","ingroup":"Git"},"functions":["git_signature_new","git_signature_now","git_signature_dup","git_signature_free"]},{"lines":297,"file":"tag.h","meta":{"file":"git2/tag.h","brief":"Git tag parsing routines","defgroup":"git_tag Git tag management","ingroup":"Git"},"functions":["git_tag_lookup","git_tag_close","git_tag_id","git_tag_target","git_tag_target_oid","git_tag_type","git_tag_name","git_tag_tagger","git_tag_message","git_tag_create","git_tag_create_o","git_tag_create_frombuffer","git_tag_create_f","git_tag_create_fo","git_tag_delete","git_tag_list"]},{"lines":71,"file":"thread-utils.h","meta":{"file":null,"brief":null,"defgroup":null,"ingroup":null},"functions":["defined"]},{"lines":266,"file":"tree.h","meta":{"file":"git2/tree.h","brief":"Git tree parsing, loading routines","defgroup":"git_tree Git tree parsing, loading routines","ingroup":"Git"},"functions":["git_tree_lookup","git_tree_close","git_tree_id","git_tree_entrycount","git_tree_entry_byname","git_tree_entry_byindex","git_tree_entry_attributes","git_tree_entry_name","git_tree_entry_id","git_tree_create_fromindex","git_treebuilder_create","git_treebuilder_clear","git_treebuilder_free","git_treebuilder_get","git_treebuilder_insert","git_treebuilder_remove","git_treebuilder_filter","git_treebuilder_write"]},{"lines":162,"file":"types.h","meta":{"file":"git2/types.h","brief":"libgit2 base & compatibility types","defgroup":null,"ingroup":"Git"},"functions":[]},{"lines":58,"file":"zlib.h","meta":{"file":"git2/zlib.h","brief":"Git data compression routines","defgroup":"git_zlib Git data compression routines","ingroup":"Git"},"functions":[]}],"groups":[["blob",["git_blob_close","git_blob_create_frombuffer","git_blob_create_fromfile","git_blob_lookup","git_blob_rawcontent","git_blob_rawsize"]],["commit",["git_commit_author","git_commit_close","git_commit_committer","git_commit_create","git_commit_create_o","git_commit_create_ov","git_commit_create_v","git_commit_id","git_commit_lookup","git_commit_message","git_commit_message_short","git_commit_parent","git_commit_parent_oid","git_commit_parentcount","git_commit_time","git_commit_time_offset","git_commit_tree","git_commit_tree_oid"]],["index",["git_index_add","git_index_append","git_index_clear","git_index_entrycount","git_index_find","git_index_free","git_index_get","git_index_open_bare","git_index_open_inrepo","git_index_read","git_index_remove","git_index_write"]],["object",["git_object__size","git_object_close","git_object_id","git_object_lookup","git_object_owner","git_object_type","git_object_typeisloose"]],["odb",["git_odb_add_alternate","git_odb_add_backend","git_odb_backend_pack","git_odb_close","git_odb_exists","git_odb_hash","git_odb_new","git_odb_object_close","git_odb_object_data","git_odb_object_id","git_odb_object_size","git_odb_object_type","git_odb_open","git_odb_open_rstream","git_odb_open_wstream","git_odb_read","git_odb_read_header","git_odb_write"]],["oid",["git_oid_allocfmt","git_oid_cmp","git_oid_cpy","git_oid_fmt","git_oid_mkraw","git_oid_mkstr","git_oid_pathfmt","git_oid_shorten_add","git_oid_shorten_free","git_oid_to_string"]],["reference",["git_reference_create_oid","git_reference_create_oid_f","git_reference_create_symbolic","git_reference_create_symbolic_f","git_reference_delete","git_reference_listall","git_reference_listcb","git_reference_lookup","git_reference_name","git_reference_oid","git_reference_owner","git_reference_packall","git_reference_rename","git_reference_rename_f","git_reference_resolve","git_reference_set_oid","git_reference_set_target","git_reference_target","git_reference_type"]],["repository",["git_repository_database","git_repository_free","git_repository_index","git_repository_init","git_repository_is_empty","git_repository_open","git_repository_path","git_repository_workdir"]],["revwalk",["git_revwalk_free","git_revwalk_hide","git_revwalk_new","git_revwalk_next","git_revwalk_push","git_revwalk_repository","git_revwalk_reset","git_revwalk_sorting"]],["signature",["git_signature_dup","git_signature_free","git_signature_new","git_signature_now"]],["tag",["git_tag_close","git_tag_create","git_tag_create_f","git_tag_create_fo","git_tag_create_frombuffer","git_tag_create_o","git_tag_delete","git_tag_id","git_tag_list","git_tag_lookup","git_tag_message","git_tag_name","git_tag_tagger","git_tag_target","git_tag_target_oid","git_tag_type"]],["tree",["git_tree_close","git_tree_create_fromindex","git_tree_entry_attributes","git_tree_entry_byindex","git_tree_entry_byname","git_tree_entry_id","git_tree_entry_name","git_tree_entrycount","git_tree_id","git_tree_lookup"]],["treebuilder",["git_treebuilder_clear","git_treebuilder_create","git_treebuilder_filter","git_treebuilder_free","git_treebuilder_get","git_treebuilder_insert","git_treebuilder_remove","git_treebuilder_write"]],["misc",["git_lasterror","git_strarray_free","defined","git_strerror"]]],"functions":{"git_treebuilder_insert":{"return":{"type":"int","comment":"0 on success; error code otherwise"},"comments":"Add or update an entry to the builder\n\nInsert a new entry for `filename` in the builder with the\ngiven attributes.\n\nif an entry named `filename` already exists, its attributes\nwill be updated with the given ones.\n\nThe optional pointer `entry_out` can be used to retrieve a\npointer to the newly created/updated entry.","file":"tree.h","line":208,"args":[{"type":"git_tree_entry **","comment":"Pointer to store the entry (optional)","name":"entry_out"},{"type":"git_treebuilder *","comment":"Tree builder","name":"bld"},{"type":"const char *","comment":"Filename of the entry","name":"filename"},{"type":"const git_oid *","comment":"SHA1 oid of the entry","name":"id"},{"type":"unsigned int","comment":"Folder attributes of the entry","name":"attributes"}]},"git_tag_close":{"return":{"type":"void","comment":""},"comments":"Close an open tag\n\nThis is a wrapper around git_object_close()\n\nIMPORTANT:\nIt *is* necessary to call this method when you stop\nusing a tag. Failure to do so will cause a memory leak.","file":"tag.h","line":55,"args":[{"type":"git_tag *","comment":"the tag to close","name":"tag"}]},"git_treebuilder_write":{"return":{"type":"int","comment":"0 on success; error code otherwise"},"comments":"Write the contents of the tree builder as a tree object\n\nThe tree builder will be written to the given `repo`, and\nit's identifying SHA1 hash will be stored in the `oid`\npointer.","file":"tree.h","line":250,"args":[{"type":"git_oid *","comment":"Pointer where to store the written OID","name":"oid"},{"type":"git_repository *","comment":"Repository where to store the object","name":"repo"},{"type":"git_treebuilder *","comment":"Tree builder to write","name":"bld"}]},"git_tree_entry_attributes":{"return":{"type":"unsigned int","comment":"attributes as an integer"},"comments":"Get the UNIX file attributes of a tree entry","file":"tree.h","line":107,"args":[{"type":"const git_tree_entry *","comment":"a tree entry","name":"entry"}]},"git_tag_delete":{"return":{"type":"int","comment":"0 on success; error code otherwise."},"comments":"Delete an existing tag reference.","file":"tag.h","line":264,"args":[{"type":"git_repository *","comment":"Repository where lives the tag","name":"repo"},{"type":"const char *","comment":"Name of the tag to be deleted;  this name is validated for consistency.","name":"tag_name"}]},"git_commit_parentcount":{"return":{"type":"unsigned int","comment":"integer of count of parents"},"comments":"Get the number of parents of this commit","file":"commit.h","line":148,"args":[{"type":"git_commit *","comment":"a previously loaded commit.","name":"commit"}]},"git_oid_mkstr":{"return":{"type":"int","comment":"GIT_SUCCESS if valid; GIT_ENOTOID on failure."},"comments":"Parse a hex formatted object id into a git_oid.","file":"oid.h","line":52,"args":[{"type":"git_oid *","comment":"oid structure the result is written into.","name":"out"},{"type":"const char *","comment":"input hex string; must be pointing at the start of         the hex sequence and have at least the number of bytes         needed for an oid encoded in hex (40 bytes).","name":"str"}]},"git_reference_create_oid":{"return":{"type":"int","comment":"0 on success; error code otherwise"},"comments":"Create a new object id reference.\n\nThe reference will be created in the repository and written\nto the disk.\n\nThis reference is owned by the repository and shall not\nbe free'd by the user.","file":"refs.h","line":92,"args":[{"type":"git_reference **","comment":"Pointer to the newly created reference","name":"ref_out"},{"type":"git_repository *","comment":"Repository where that reference will live","name":"repo"},{"type":"const char *","comment":"The name of the reference","name":"name"},{"type":"const git_oid *","comment":"The object id pointed to by the reference.","name":"id"}]},"git_tree_lookup":{"return":{"type":"int","comment":"0 on success; error code otherwise"},"comments":"Lookup a tree object from the repository.","file":"tree.h","line":42,"args":[{"type":"git_tree **","comment":"pointer to the looked up tree","name":"tree"},{"type":"git_repository *","comment":"the repo to use when locating the tree.","name":"repo"},{"type":"const git_oid *","comment":"identity of the tree to locate.","name":"id"}]},"git_odb_open":{"return":{"type":"int","comment":"GIT_SUCCESS if the database opened; otherwise an error          code describing why the open was not possible."},"comments":"Create a new object database and automatically add\nthe two default backends:\n\n- git_odb_backend_loose: read and write loose object files\nfrom disk, assuming `objects_dir` as the Objects folder\n\n- git_odb_backend_pack: read objects from packfiles,\nassuming `objects_dir` as the Objects folder which\ncontains a 'pack/' folder with the corresponding data","file":"odb.h","line":55,"args":[{"type":"git_odb **","comment":"location to store the database pointer, if opened.             Set to NULL if the open failed.","name":"out"},{"type":"const char *","comment":"path of the backends' \"objects\" directory.","name":"objects_dir"}]},"git_reference_set_target":{"return":{"type":"int","comment":"0 on success; error code otherwise"},"comments":"Set the symbolic target of a reference.\n\nThe reference must be a symbolic reference, otherwise\nthis method will fail.\n\nThe reference will be automatically updated in\nmemory and on disk.","file":"refs.h","line":191,"args":[{"type":"git_reference *","comment":"The reference","name":"ref"},{"type":"const char *","comment":"The new target for the reference","name":"target"}]},"git_commit_message":{"return":{"type":"const char *","comment":"the message of a commit"},"comments":"Get the full message of a commit.","file":"commit.h","line":89,"args":[{"type":"git_commit *","comment":"a previously loaded commit.","name":"commit"}]},"git_treebuilder_create":{"return":{"type":"int","comment":"0 on sucess; error code otherwise"},"comments":"Create a new tree builder.\n\nThe tree builder can be used to create or modify\ntrees in memory and write them as tree objects to the\ndatabase.\n\nIf the `source` parameter is not NULL, the tree builder\nwill be initialized with the entries of the given tree.\n\nIf the `source` parameter is NULL, the tree builder will\nhave no entries and will have to be filled manually.","file":"tree.h","line":159,"args":[{"type":"git_treebuilder **","comment":"Pointer where to store the tree builder","name":"builder_p"},{"type":"const git_tree *","comment":"Source tree to initialize the builder (optional)","name":"source"}]},"git_commit_time_offset":{"return":{"type":"int","comment":"positive or negative timezone offset, in minutes from UTC"},"comments":"Get the commit timezone offset (i.e. committer's preferred timezone) of a commit.","file":"commit.h","line":105,"args":[{"type":"git_commit *","comment":"a previously loaded commit.","name":"commit"}]},"git_revwalk_free":{"return":{"type":"void","comment":""},"comments":"Free a revision walker previously allocated.","file":"revwalk.h","line":169,"args":[{"type":"git_revwalk *","comment":"traversal handle to close.  If NULL nothing occurs.","name":"walk"}]},"git_tree_close":{"return":{"type":"void","comment":""},"comments":"Close an open tree\n\nThis is a wrapper around git_object_close()\n\nIMPORTANT:\nIt *is* necessary to call this method when you stop\nusing a tree. Failure to do so will cause a memory leak.","file":"tree.h","line":55,"args":[{"type":"git_tree *","comment":"the tree to close","name":"tree"}]},"git_revwalk_new":{"return":{"type":"int","comment":"0 on success; error code otherwise"},"comments":"Allocate a new revision walker to iterate through a repo.\n\nThis revision walker uses a custom memory pool and an internal\ncommit cache, so it is relatively expensive to allocate.\n\nFor maximum performance, this revision walker should be\nreused for different walks.\n\nThis revision walker is *not* thread safe: it may only be\nused to walk a repository on a single thread; however,\nit is possible to have several revision walkers in\nseveral different threads walking the same repository.","file":"revwalk.h","line":70,"args":[{"type":"git_revwalk **","comment":"pointer to the new revision walker","name":"walker"},{"type":"git_repository *","comment":"the repo to walk through","name":"repo"}]},"git_signature_new":{"return":{"type":"git_signature *","comment":"the new sig, NULL on out of memory"},"comments":"Create a new action signature. The signature must be freed\nmanually or using git_signature_free\n\n@param mail email of the person","file":"signature.h","line":40,"args":[{"type":"const char *","comment":"name of the person","name":"name"},{"type":"const char *","comment":"","name":"email"},{"type":"git_time_t","comment":"time when the action happened","name":"time"},{"type":"int","comment":"timezone offset in minutes for the time","name":"offset"}]},"git_oid_cmp":{"return":{"type":"int","comment":"<0, 0, >0 if a < b, a == b, a > b."},"comments":"Compare two oid structures.","file":"oid.h","line":127,"args":[{"type":"const git_oid *","comment":"first oid structure.","name":"a"},{"type":"const git_oid *","comment":"second oid structure.","name":"b"}]},"git_signature_dup":{"return":{"type":"git_signature *","comment":"a copy of sig, NULL on out of memory"},"comments":"Create a copy of an existing signature.\n\nAll internal strings are also duplicated.","file":"signature.h","line":63,"args":[{"type":"const git_signature *","comment":"signature to duplicated","name":"sig"}]},"git_tag_name":{"return":{"type":"const char *","comment":"name of the tag"},"comments":"Get the name of a tag\n\n@param tag a previously loaded tag.","file":"tag.h","line":109,"args":[{"type":"git_tag *","comment":"","name":"t"}]},"git_repository_index":{"return":{"type":"int","comment":"0 on success; error code if the index could not be opened"},"comments":"Get the Index file of a Git repository\n\nThis is a cheap operation; the index is only opened on the first call,\nand subsequent calls only retrieve the previous pointer.","file":"repository.h","line":143,"args":[{"type":"git_index **","comment":"Pointer where to store the index","name":"index"},{"type":"git_repository *","comment":"a repository object","name":"repo"}]},"git_blob_rawcontent":{"return":{"type":"const void *","comment":"the pointer; NULL if the blob has no contents"},"comments":"Get a read-only buffer with the raw content of a blob.\n\nA pointer to the raw content of a blob is returned;\nthis pointer is owned internally by the object and shall\nnot be free'd. The pointer may be invalidated at a later\ntime.","file":"blob.h","line":73,"args":[{"type":"git_blob *","comment":"pointer to the blob","name":"blob"}]},"git_object_typeisloose":{"return":{"type":"int","comment":"true if the type represents a valid loose object type,  false otherwise."},"comments":"Determine if the given git_otype is a valid loose object type.","file":"object.h","line":121,"args":[{"type":"git_otype","comment":"object type to test.","name":"type"}]},"git_revwalk_repository":{"return":{"type":"git_repository *","comment":"the repository being walked"},"comments":"Return the repository on which this walker\nis operating.","file":"revwalk.h","line":176,"args":[{"type":"git_revwalk *","comment":"the revision walker","name":"walk"}]},"git_reference_type":{"return":{"type":"git_rtype","comment":"the type"},"comments":"Get the type of a reference\n\nEither direct (GIT_REF_OID) or symbolic (GIT_REF_SYMBOLIC)","file":"refs.h","line":150,"args":[{"type":"git_reference *","comment":"The reference","name":"ref"}]},"git_odb_add_alternate":{"return":{"type":"int","comment":"0 on sucess; error code otherwise"},"comments":"Add a custom backend to an existing Object DB; this\nbackend will work as an alternate.\n\nAlternate backends are always checked for objects *after*\nall the main backends have been exhausted.\n\nWriting is disabled on alternate backends.\n\nRead <odb_backends.h> for more information.\n\n@paramm backend pointer to a git_odb_backend instance","file":"odb.h","line":85,"args":[{"type":"git_odb *","comment":"database to add the backend to","name":"odb"},{"type":"git_odb_backend *","comment":"","name":"backend"},{"type":"int","comment":"","name":"priority"}]},"git_tag_create_o":{"return":{"type":"int","comment":""},"comments":"Create a new tag in the repository from an existing\n`git_object` instance\n\nThis method replaces the `target` and `target_type`\nparemeters of `git_tag_create` by a single instance\nof a `const git_object *`, which is assured to be\na proper object in the ODB and hence will create\na valid tag\n\n@see git_tag_create","file":"tag.h","line":172,"args":[{"type":"git_oid *","comment":"","name":"oid"},{"type":"git_repository *","comment":"","name":"repo"},{"type":"const char *","comment":"","name":"tag_name"},{"type":"const git_object *","comment":"","name":"target"},{"type":"const git_signature *","comment":"","name":"tagger"},{"type":"const char *","comment":"","name":"message"}]},"git_revwalk_hide":{"return":{"type":"int","comment":"0 on success; error code otherwise"},"comments":"Mark a commit (and its ancestors) uninteresting for the output.\n\nThe given OID must belong to a commit on the walked\nrepository.\n\nThe resolved commit and all its parents will be hidden from the\noutput on the revision walk.\n\n@param walker the walker being used for the traversal.\n@param commit the commit that will be ignored during the traversal","file":"revwalk.h","line":123,"args":[{"type":"git_revwalk *","comment":"","name":"walk"},{"type":"const git_oid *","comment":"","name":"oid"}]},"git_strarray_free":{"return":{"type":"void","comment":""},"comments":"@file git2/common.h\n@brief Git common platform definitions\n@defgroup git_common Git common platform definitions\n@ingroup Git\n@{","file":"common.h","line":79,"args":[{"type":"git_strarray *","comment":"","name":"array"}]},"git_index_append":{"return":{"type":"int","comment":"0 on success, otherwise an error code"},"comments":"Add (append) an index entry from a file in disk\n\nA new entry will always be inserted into the index;\nif the index already contains an entry for such\npath, the old entry will **not** be replaced.\n\nThe file `path` must be relative to the repository's\nworking folder and must be readable.\n\nThis method will fail in bare index instances.","file":"index.h","line":201,"args":[{"type":"git_index *","comment":"an existing index object","name":"index"},{"type":"const char *","comment":"filename to add","name":"path"},{"type":"int","comment":"stage for the entry","name":"stage"}]},"git_reference_create_symbolic":{"return":{"type":"int","comment":"0 on success; error code otherwise"},"comments":"Create a new symbolic reference.\n\nThe reference will be created in the repository and written\nto the disk.\n\nThis reference is owned by the repository and shall not\nbe free'd by the user.","file":"refs.h","line":54,"args":[{"type":"git_reference **","comment":"Pointer to the newly created reference","name":"ref_out"},{"type":"git_repository *","comment":"Repository where that reference will live","name":"repo"},{"type":"const char *","comment":"The name of the reference","name":"name"},{"type":"const char *","comment":"The target of the reference","name":"target"}]},"git_object_id":{"return":{"type":"const git_oid *","comment":"the SHA1 id"},"comments":"Get the id (SHA1) of a repository object","file":"object.h","line":61,"args":[{"type":"const git_object *","comment":"the repository object","name":"obj"}]},"git_tag_create_frombuffer":{"return":{"type":"int","comment":""},"comments":"Create a new tag in the repository from a buffer","file":"tag.h","line":192,"args":[{"type":"git_oid *","comment":"Pointer where to store the OID of the newly created tag","name":"oid"},{"type":"git_repository *","comment":"Repository where to store the tag","name":"repo"},{"type":"const char *","comment":"Raw tag data","name":"buffer"}]},"git_odb_hash":{"return":{"type":"int","comment":"0 on success; error code otherwise"},"comments":"Determine the object-ID (sha1 hash) of a data buffer\n\nThe resulting SHA-1 OID will the itentifier for the data\nbuffer as if the data buffer it were to written to the ODB.","file":"odb.h","line":234,"args":[{"type":"git_oid *","comment":"the resulting object-ID.","name":"id"},{"type":"const void *","comment":"data to hash","name":"data"},{"type":"size_t","comment":"size of the data","name":"len"},{"type":"git_otype","comment":"of the data to hash","name":"type"}]},"git_object_lookup":{"return":{"type":"int","comment":"a reference to the object"},"comments":"Lookup a reference to one of the objects in a repostory.\n\nThe generated reference is owned by the repository and\nshould be closed with the `git_object_close` method\ninstead of free'd manually.\n\nThe 'type' parameter must match the type of the object\nin the odb; the method will fail otherwise.\nThe special value 'GIT_OBJ_ANY' may be passed to let\nthe method guess the object's type.","file":"object.h","line":41,"args":[{"type":"git_object **","comment":"pointer to the looked-up object","name":"object"},{"type":"git_repository *","comment":"the repository to look up the object","name":"repo"},{"type":"const git_oid *","comment":"the unique identifier for the object","name":"id"},{"type":"git_otype","comment":"the type of the object","name":"type"}]},"git_reference_oid":{"return":{"type":"const git_oid *","comment":"a pointer to the oid if available, NULL otherwise"},"comments":"Get the OID pointed to by a reference.\n\nOnly available if the reference is direct (i.e. not symbolic)","file":"refs.h","line":130,"args":[{"type":"git_reference *","comment":"The reference","name":"ref"}]},"git_oid_shorten_free":{"return":{"type":"void","comment":""},"comments":"Free an OID shortener instance","file":"oid.h","line":182,"args":[{"type":"git_oid_shorten *","comment":"a `git_oid_shorten` instance","name":"os"}]},"git_odb_object_data":{"return":{"type":"const void *","comment":"a pointer to the data"},"comments":"Return the data of an ODB object\n\nThis is the uncompressed, raw data as read from the ODB,\nwithout the leading header.\n\nThis pointer is owned by the object and shall not be free'd.","file":"odb.h","line":268,"args":[{"type":"git_odb_object *","comment":"the object","name":"object"}]},"git_treebuilder_filter":{"return":{"type":"void","comment":""},"comments":"Filter the entries in the tree\n\nThe `filter` callback will be called for each entry\nin the tree with a pointer to the entry and the\nprovided `payload`: if the callback returns 1, the\nentry will be filtered (removed from the builder).","file":"tree.h","line":237,"args":[{"type":"git_treebuilder *","comment":"Tree builder","name":"bld"},{"type":"int(*)(const git_tree_entry *, void *)","comment":"Callback to filter entries","name":"filter"},{"type":"void *","comment":"","name":"payload"}]},"__attribute__":{"return":{"type":"","comment":""},"comments":"Declare a public TLS symbol exported for application use.","file":"common.h","line":53,"args":[{"type":"","comment":"","name":"(visibility(\"default\"))"}]},"git_repository_database":{"return":{"type":"git_odb *","comment":"a pointer to the object db"},"comments":"Get the object database behind a Git repository","file":"repository.h","line":135,"args":[{"type":"git_repository *","comment":"a repository object","name":"repo"}]},"git_tree_entry_id":{"return":{"type":"const git_oid *","comment":"the oid of the object"},"comments":"Get the id of the object pointed by the entry","file":"tree.h","line":123,"args":[{"type":"const git_tree_entry *","comment":"a tree entry","name":"entry"}]},"git_tag_list":{"return":{"type":"int","comment":"0 on success; error code otherwise"},"comments":"Fill a list with all the tags in the Repository\n\nThe string array will be filled with the names of the\nmatching tags; these values are owned by the user and\nshould be free'd manually when no longer needed, using\n`git_strarray_free`.\n\n@param array Pointer to a git_strarray structure where\nthe tag names will be stored","file":"tag.h","line":278,"args":[{"type":"git_strarray *","comment":"","name":"tag_names"},{"type":"git_repository *","comment":"Repository where to find the tags","name":"repo"}]},"git_blob_create_fromfile":{"return":{"type":"int","comment":"0 on success; error code otherwise"},"comments":"Read a file from the working folder of a repository\nand write it to the Object Database as a loose blob","file":"blob.h","line":94,"args":[{"type":"git_oid *","comment":"return the id of the written blob","name":"oid"},{"type":"git_repository *","comment":"repository where the blob will be written.  this repository cannot be bare","name":"repo"},{"type":"const char *","comment":"file from which the blob will be created,  relative to the repository's working dir","name":"path"}]},"git_tree_entry_byname":{"return":{"type":"const git_tree_entry *","comment":"the tree entry; NULL if not found"},"comments":"Lookup a tree entry by its filename","file":"tree.h","line":89,"args":[{"type":"git_tree *","comment":"a previously loaded tree.","name":"tree"},{"type":"const char *","comment":"the filename of the desired entry","name":"filename"}]},"git_tag_id":{"return":{"type":"const git_oid *","comment":"object identity for the tag."},"comments":"Get the id of a tag.","file":"tag.h","line":73,"args":[{"type":"git_tag *","comment":"a previously loaded tag.","name":"tag"}]},"git_odb_close":{"return":{"type":"void","comment":""},"comments":"Close an open object database.","file":"odb.h","line":102,"args":[{"type":"git_odb *","comment":"database pointer to close.  If NULL no action is taken.","name":"db"}]},"git_reference_create_oid_f":{"return":{"type":"int","comment":"0 on success; error code otherwise"},"comments":"Create a new object id reference, overwriting an existing one with\nthe same name, if it exists.\n\nIf the new reference isn't an object id one, any pointers to the\nold reference become invalid.\n\nThe reference will be created in the repository and written\nto the disk.\n\nThis reference is owned by the repository and shall not\nbe free'd by the user.","file":"refs.h","line":109,"args":[{"type":"git_reference **","comment":"Pointer to the newly created reference","name":"ref_out"},{"type":"git_repository *","comment":"Repository where that reference will live","name":"repo"},{"type":"const char *","comment":"The name of the reference","name":"name"},{"type":"const git_oid *","comment":"The object id pointed to by the reference.","name":"id"}]},"git_reference_target":{"return":{"type":"const char *","comment":"a pointer to the name if available, NULL otherwise"},"comments":"Get full name to the reference pointed by this reference\n\nOnly available if the reference is symbolic","file":"refs.h","line":140,"args":[{"type":"git_reference *","comment":"The reference","name":"ref"}]},"git_odb_add_backend":{"return":{"type":"int","comment":"0 on sucess; error code otherwise"},"comments":"Add a custom backend to an existing Object DB\n\nRead <odb_backends.h> for more information.\n\n@paramm backend pointer to a git_odb_backend instance","file":"odb.h","line":74,"args":[{"type":"git_odb *","comment":"database to add the backend to","name":"odb"},{"type":"git_odb_backend *","comment":"","name":"backend"},{"type":"int","comment":"","name":"priority"}]},"git_object_type":{"return":{"type":"git_otype","comment":"the object's type"},"comments":"Get the object type of an object","file":"object.h","line":69,"args":[{"type":"const git_object *","comment":"the repository object","name":"obj"}]},"git_tag_create_fo":{"return":{"type":"int","comment":""},"comments":"Create a new tag in the repository from an existing\n`git_object` instance and overwrite an already existing\ntag reference, if any.\n\nThis method replaces the `target` and `target_type`\nparemeters of `git_tag_create_f` by a single instance\nof a `const git_object *`, which is assured to be\na proper object in the ODB and hence will create\na valid tag\n\n@see git_tag_create_f","file":"tag.h","line":243,"args":[{"type":"git_oid *","comment":"","name":"oid"},{"type":"git_repository *","comment":"","name":"repo"},{"type":"const char *","comment":"","name":"tag_name"},{"type":"const git_object *","comment":"","name":"target"},{"type":"const git_signature *","comment":"","name":"tagger"},{"type":"const char *","comment":"","name":"message"}]},"git_commit_create_ov":{"return":{"type":"int","comment":""},"comments":"Create a new commit in the repository using `git_object`\ninstances and a variable argument list.\n\nThe `tree_oid` paremeter now takes a instance\nof `const git_tree *`.\n\nThe parents for the commit are specified as a variable\nlist of pointers to `const git_commit *`. Note that this\nis a convenience method which may not be safe to export\nfor certain languages or compilers\n\nAll other parameters remain the same\n\n@see git_commit_create","file":"commit.h","line":248,"args":[{"type":"git_oid *","comment":"","name":"oid"},{"type":"git_repository *","comment":"","name":"repo"},{"type":"const char *","comment":"","name":"update_ref"},{"type":"const git_signature *","comment":"","name":"author"},{"type":"const git_signature *","comment":"","name":"committer"},{"type":"const char *","comment":"","name":"message"},{"type":"const git_tree *","comment":"","name":"tree"},{"type":"int","comment":"","name":"parent_count"},{"type":"","comment":"","name":"..."}]},"git_commit_create_o":{"return":{"type":"int","comment":""},"comments":"Create a new commit in the repository using `git_object`\ninstances as parameters.\n\nThe `tree_oid` and `parent_oids` paremeters now take a instance\nof `git_tree` and `git_commit`, respectively.\n\nAll other parameters remain the same\n\n@see git_commit_create","file":"commit.h","line":226,"args":[{"type":"git_oid *","comment":"","name":"oid"},{"type":"git_repository *","comment":"","name":"repo"},{"type":"const char *","comment":"","name":"update_ref"},{"type":"const git_signature *","comment":"","name":"author"},{"type":"const git_signature *","comment":"","name":"committer"},{"type":"const char *","comment":"","name":"message"},{"type":"const git_tree *","comment":"","name":"tree"},{"type":"int","comment":"","name":"parent_count"},{"type":"const git_commit *","comment":"","name":"parents[]"}]},"git_index_add":{"return":{"type":"int","comment":"0 on success, otherwise an error code"},"comments":"Add or update an index entry from a file in disk\n\nThe file `path` must be relative to the repository's\nworking folder and must be readable.\n\nThis method will fail in bare index instances.","file":"index.h","line":174,"args":[{"type":"git_index *","comment":"an existing index object","name":"index"},{"type":"const char *","comment":"filename to add","name":"path"},{"type":"int","comment":"stage for the entry","name":"stage"}]},"git_treebuilder_clear":{"return":{"type":"void","comment":""},"comments":"Clear all the entires in the builder","file":"tree.h","line":178,"args":[{"type":"git_treebuilder *","comment":"Builder to clear","name":"bld"}]},"git_tag_create":{"return":{"type":"int","comment":"0 on success; error code otherwise.  A tag object is written to the ODB, and a proper reference  is written in the /refs/tags folder, pointing to it"},"comments":"Create a new tag in the repository from an OID","file":"tag.h","line":134,"args":[{"type":"git_oid *","comment":"Pointer where to store the OID of the  newly created tag","name":"oid"},{"type":"git_repository *","comment":"Repository where to store the tag","name":"repo"},{"type":"const char *","comment":"Name for the tag; this name is validated  for consistency. It should also not conflict with an  already existing tag name","name":"tag_name"},{"type":"const git_oid *","comment":"OID to which this tag points; note that no  validation is done on this OID. Use the _o version of this  method to assure a proper object is being tagged","name":"target"},{"type":"git_otype","comment":"Type of the tagged OID; note that no  validation is performed here either","name":"target_type"},{"type":"const git_signature *","comment":"Signature of the tagger for this tag, and   of the tagging time","name":"tagger"},{"type":"const char *","comment":"Full message for this tag","name":"message"}]},"git_index_get":{"return":{"type":"git_index_entry *","comment":"a pointer to the entry; NULL if out of bounds"},"comments":"Get a pointer to one of the entries in the index\n\nThis entry can be modified, and the changes will be written\nback to disk on the next write() call.","file":"index.h","line":247,"args":[{"type":"git_index *","comment":"an existing index object","name":"index"},{"type":"int","comment":"the position of the entry","name":"n"}]},"git_repository_free":{"return":{"type":"void","comment":""},"comments":"Free a previously allocated repository\n\nNote that after a repository is free'd, all the objects it has spawned\nwill still exist until they are manually closed by the user\nwith `git_object_close`, but accessing any of the attributes of\nan object without a backing repository will result in undefined\nbehavior","file":"repository.h","line":155,"args":[{"type":"git_repository *","comment":"repository handle to close. If NULL nothing occurs.","name":"repo"}]},"git_oid_cpy":{"return":{"type":"void","comment":""},"comments":"Copy an oid from one structure to another.","file":"oid.h","line":120,"args":[{"type":"git_oid *","comment":"oid structure the result is written into.","name":"out"},{"type":"const git_oid *","comment":"oid structure to copy from.","name":"src"}]},"git_index_open_inrepo":{"return":{"type":"int","comment":"0 on success; error code otherwise"},"comments":"Open the Index inside the git repository pointed\nby 'repo'.","file":"index.h","line":120,"args":[{"type":"git_index **","comment":"the pointer for the new index","name":"index"},{"type":"git_repository *","comment":"the git repo which owns the index","name":"repo"}]},"git_treebuilder_get":{"return":{"type":"const git_tree_entry *","comment":"pointer to the entry; NULL if not found"},"comments":"Get an entry from the builder from its filename\n\nThe returned entry is owned by the builder and should\nnot be freed manually.","file":"tree.h","line":196,"args":[{"type":"git_treebuilder *","comment":"Tree builder","name":"bld"},{"type":"const char *","comment":"Name of the entry","name":"filename"}]},"git_oid_shorten_add":{"return":{"type":"int","comment":"the minimal length to uniquely identify all OIDs   added so far to the set; or an error code (<0) if an   error occurs."},"comments":"Add a new OID to set of shortened OIDs and calculate\nthe minimal length to uniquely identify all the OIDs in\nthe set.\n\nThe OID is expected to be a 40-char hexadecimal string.\nThe OID is owned by the user and will not be modified\nor freed.\n\nFor performance reasons, there is a hard-limit of how many\nOIDs can be added to a single set (around ~22000, assuming\na mostly randomized distribution), which should be enough\nfor any kind of program, and keeps the algorithm fast and\nmemory-efficient.\n\nAttempting to add more than those OIDs will result in a\nGIT_ENOMEM error","file":"oid.h","line":156,"args":[{"type":"git_oid_shorten *","comment":"a `git_oid_shorten` instance","name":"os"},{"type":"const char *","comment":"an OID in text form","name":"text_oid"}]},"git_blob_close":{"return":{"type":"void","comment":""},"comments":"Close an open blob\n\nThis is a wrapper around git_object_close()\n\nIMPORTANT:\nIt *is* necessary to call this method when you stop\nusing a blob. Failure to do so will cause a memory leak.","file":"blob.h","line":55,"args":[{"type":"git_blob *","comment":"the blob to close","name":"blob"}]},"git_revwalk_next":{"return":{"type":"int","comment":"GIT_SUCCESS if the next commit was found;  GIT_EREVWALKOVER if there are no commits left to iterate"},"comments":"Get the next commit from the revision walk.\n\nThe initial call to this method is *not* blocking when\niterating through a repo with a time-sorting mode.\n\nIterating with Topological or inverted modes makes the initial\ncall blocking to preprocess the commit list, but this block should be\nmostly unnoticeable on most repositories (topological preprocessing\ntimes at 0.3s on the git.git repo).\n\nThe revision walker is reset when the walk is over.","file":"revwalk.h","line":138,"args":[{"type":"git_oid *","comment":"Pointer where to store the oid of the next commit","name":"oid"},{"type":"git_revwalk *","comment":"the walker to pop the commit from.","name":"walk"}]},"git_repository_init":{"return":{"type":"int","comment":"0 on success; error code otherwise"},"comments":"Creates a new Git repository in the given folder.\n\nTODO:\n- Reinit the repository\n- Create config files","file":"repository.h","line":168,"args":[{"type":"git_repository **","comment":"pointer to the repo which will be created or reinitialized","name":"repo_out"},{"type":"const char *","comment":"the path to the repository","name":"path"},{"type":"unsigned","comment":"if true, a Git repository without a working directory is created   at the pointed path. If false, provided path will be considered as the working   directory into which the .git directory will be created.","name":"is_bare"}]},"git_index_clear":{"return":{"type":"void","comment":""},"comments":"Clear the contents (all the entries) of an index object.\nThis clears the index object in memory; changes must be manually\nwritten to disk for them to take effect.","file":"index.h","line":130,"args":[{"type":"git_index *","comment":"an existing index object","name":"index"}]},"git_repository_workdir":{"return":{"type":"const char *","comment":"NULL if the repository is bare; absolute path to the working directory otherwise."},"comments":"Get the normalized path to the working directory of the repository.\n\nIf the repository is bare, there is no working directory and NULL we be returned.","file":"repository.h","line":205,"args":[{"type":"git_repository *","comment":"a repository object","name":"repo"}]},"git_treebuilder_remove":{"return":{"type":"int","comment":""},"comments":"Remove an entry from the builder by its filename","file":"tree.h","line":229,"args":[{"type":"git_treebuilder *","comment":"Tree builder","name":"bld"},{"type":"const char *","comment":"Filename of the entry to remove","name":"filename"}]},"git_tree_entrycount":{"return":{"type":"size_t","comment":"the number of entries in the tree"},"comments":"Get the number of entries listed in a tree","file":"tree.h","line":81,"args":[{"type":"git_tree *","comment":"a previously loaded tree.","name":"tree"}]},"git_tag_target":{"return":{"type":"int","comment":"0 on success; error code otherwise"},"comments":"Get the tagged object of a tag\n\nThis method performs a repository lookup for the\ngiven object and returns it\n\n@param tag a previously loaded tag.","file":"tag.h","line":81,"args":[{"type":"git_object **","comment":"pointer where to store the target","name":"target"},{"type":"git_tag *","comment":"","name":"t"}]},"git_commit_time":{"return":{"type":"git_time_t","comment":"the time of a commit"},"comments":"Get the commit time (i.e. committer time) of a commit.","file":"commit.h","line":97,"args":[{"type":"git_commit *","comment":"a previously loaded commit.","name":"commit"}]},"git_index_free":{"return":{"type":"void","comment":""},"comments":"Free an existing index object.","file":"index.h","line":139,"args":[{"type":"git_index *","comment":"an existing index object","name":"index"}]},"git_index_write":{"return":{"type":"int","comment":"0 on success, otherwise an error code"},"comments":"Write an existing index object from memory back to disk\nusing an atomic file lock.","file":"index.h","line":155,"args":[{"type":"git_index *","comment":"an existing index object","name":"index"}]},"git_odb_object_id":{"return":{"type":"const git_oid *","comment":"a pointer to the OID"},"comments":"Return the OID of an ODB object\n\nThis is the OID from which the object was read from","file":"odb.h","line":258,"args":[{"type":"git_odb_object *","comment":"the object","name":"object"}]},"git_commit_create":{"return":{"type":"int","comment":"0 on success; error code otherwise  The created commit will be written to the Object Database and  the given reference will be updated to point to it"},"comments":"Create a new commit in the repository\n\n\n@param parents Array of pointers to parent OIDs for this commit.\nNote that no validation is performed on these OIDs. Use the _o\nvariants of this method to assure that are parents for the commit\nare proper objects.","file":"commit.h","line":177,"args":[{"type":"git_oid *","comment":"Pointer where to store the OID of the  newly created commit","name":"oid"},{"type":"git_repository *","comment":"Repository where to store the commit","name":"repo"},{"type":"const char *","comment":"If not NULL, name of the reference that  will be updated to point to this commit. If the reference  is not direct, it will be resolved to a direct reference.  Use \"HEAD\" to update the HEAD of the current branch and  make it point to this commit","name":"update_ref"},{"type":"const git_signature *","comment":"Signature representing the author and the authory  time of this commit","name":"author"},{"type":"const git_signature *","comment":"Signature representing the committer and the   commit time of this commit","name":"committer"},{"type":"const char *","comment":"Full message for this commit","name":"message"},{"type":"const git_oid *","comment":"Object ID of the tree for this commit. Note that   no validation is performed on this OID. Use the _o variants of   this method to assure a proper tree is passed to the commit.","name":"tree_oid"},{"type":"int","comment":"Number of parents for this commit","name":"parent_count"},{"type":"const git_oid *","comment":"","name":"parent_oids[]"}]},"git_revwalk_push":{"return":{"type":"int","comment":"0 on success; error code otherwise"},"comments":"Mark a commit to start traversal from.\n\nThe given OID must belong to a commit on the walked\nrepository.\n\nThe given commit will be used as one of the roots\nwhen starting the revision walk. At least one commit\nmust be pushed the repository before a walk can\nbe started.\n\n@param walker the walker being used for the traversal.","file":"revwalk.h","line":105,"args":[{"type":"git_revwalk *","comment":"","name":"walk"},{"type":"const git_oid *","comment":"the oid of the commit to start from.","name":"oid"}]},"git_blob_lookup":{"return":{"type":"int","comment":"0 on success; error code otherwise"},"comments":"Lookup a blob object from a repository.","file":"blob.h","line":42,"args":[{"type":"git_blob **","comment":"pointer to the looked up blob","name":"blob"},{"type":"git_repository *","comment":"the repo to use when locating the blob.","name":"repo"},{"type":"const git_oid *","comment":"identity of the blob to locate.","name":"id"}]},"git_tag_tagger":{"return":{"type":"const git_signature *","comment":"reference to the tag's author"},"comments":"Get the tagger (author) of a tag\n\n@param tag a previously loaded tag.","file":"tag.h","line":117,"args":[{"type":"git_tag *","comment":"","name":"t"}]},"git_odb_new":{"return":{"type":"int","comment":"GIT_SUCCESS if the database was created; otherwise an error          code describing why the open was not possible."},"comments":"Create a new object database with no backends.\n\nBefore the ODB can be used for read/writing, a custom database\nbackend must be manually added using `git_odb_add_backend()`","file":"odb.h","line":42,"args":[{"type":"git_odb **","comment":"location to store the database pointer, if opened.             Set to NULL if the open failed.","name":"out"}]},"git_commit_tree":{"return":{"type":"int","comment":"0 on success; error code otherwise"},"comments":"Get the tree pointed to by a commit.","file":"commit.h","line":129,"args":[{"type":"git_tree **","comment":"pointer where to store the tree object","name":"tree_out"},{"type":"git_commit *","comment":"a previously loaded commit.","name":"commit"}]},"git_oid_allocfmt":{"return":{"type":"char *","comment":"the c-string; NULL if memory is exhausted.  Caller must          deallocate the string with free()."},"comments":"Format a gid_oid into a newly allocated c-string.","file":"oid.h","line":95,"args":[{"type":"const git_oid *","comment":"the oid structure to format","name":"oid"}]},"git_treebuilder_free":{"return":{"type":"void","comment":""},"comments":"Free a tree builder\n\nThis will clear all the entries and free to builder.\nFailing to free the builder after you're done using it\nwill result in a memory leak","file":"tree.h","line":185,"args":[{"type":"git_treebuilder *","comment":"Builder to free","name":"bld"}]},"git_tree_create_fromindex":{"return":{"type":"int","comment":"0 on success; error code otherwise"},"comments":"Write a tree to the ODB from the index file\n\nThis method will scan the index and write a representation\nof its current state back to disk; it recursively creates\ntree objects for each of the subtrees stored in the index,\nbut only returns the OID of the root tree. This is the OID\nthat can be used e.g. to create a commit.\n\nThe index instance cannot be bare, and needs to be associated\nto an existing repository.","file":"tree.h","line":141,"args":[{"type":"git_oid *","comment":"Pointer where to store the written tree","name":"oid"},{"type":"git_index *","comment":"Index to write","name":"index"}]},"git_commit_create_v":{"return":{"type":"int","comment":""},"comments":"Create a new commit in the repository using\na variable argument list.\n\nThe parents for the commit are specified as a variable\nlist of pointers to `const git_oid *`. Note that this\nis a convenience method which may not be safe to export\nfor certain languages or compilers\n\nAll other parameters remain the same\n\n@see git_commit_create","file":"commit.h","line":276,"args":[{"type":"git_oid *","comment":"","name":"oid"},{"type":"git_repository *","comment":"","name":"repo"},{"type":"const char *","comment":"","name":"update_ref"},{"type":"const git_signature *","comment":"","name":"author"},{"type":"const git_signature *","comment":"","name":"committer"},{"type":"const char *","comment":"","name":"message"},{"type":"const git_oid *","comment":"","name":"tree_oid"},{"type":"int","comment":"","name":"parent_count"},{"type":"","comment":"","name":"..."}]},"git_reference_lookup":{"return":{"type":"int","comment":"0 on success; error code otherwise"},"comments":"Lookup a reference by its name in a repository.\n\nThe generated reference is owned by the repository and\nshould not be freed by the user.","file":"refs.h","line":41,"args":[{"type":"git_reference **","comment":"pointer to the looked-up reference","name":"reference_out"},{"type":"git_repository *","comment":"the repository to look up the reference","name":"repo"},{"type":"const char *","comment":"the long name for the reference (e.g. HEAD, ref/heads/master, refs/tags/v0.1.0, ...)","name":"name"}]},"git_odb_open_rstream":{"return":{"type":"int","comment":"0 if the stream was created; error code otherwise"},"comments":"Open a stream to read an object from the ODB\n\nNote that most backends do *not* support streaming reads\nbecause they store their objects as compressed/delta'ed blobs.\n\nIt's recommended to use `git_odb_read` instead, which is\nassured to work on all backends.\n\nThe returned stream will be of type `GIT_STREAM_RDONLY` and\nwill have the following methods:\n\n- stream->read: read `n` bytes from the stream\n- stream->free: free the stream\n\nThe stream must always be free'd or will leak memory.\n\n@see git_odb_stream","file":"odb.h","line":208,"args":[{"type":"git_odb_stream **","comment":"pointer where to store the stream","name":"stream"},{"type":"git_odb *","comment":"object database where the stream will read from","name":"db"},{"type":"const git_oid *","comment":"oid of the object the stream will read from","name":"oid"}]},"git_commit_committer":{"return":{"type":"const git_signature *","comment":"the committer of a commit"},"comments":"Get the committer of a commit.","file":"commit.h","line":113,"args":[{"type":"git_commit *","comment":"a previously loaded commit.","name":"commit"}]},"git_reference_resolve":{"return":{"type":"int","comment":"0 on success; error code otherwise"},"comments":"Resolve a symbolic reference\n\nThie method iteratively peels a symbolic reference\nuntil it resolves to a direct reference to an OID.\n\nIf a direct reference is passed as an argument,\nthat reference is returned immediately","file":"refs.h","line":168,"args":[{"type":"git_reference **","comment":"Pointer to the peeled reference","name":"resolved_ref"},{"type":"git_reference *","comment":"The reference","name":"ref"}]},"git_reference_name":{"return":{"type":"const char *","comment":"the full name for the ref"},"comments":"Get the full name of a reference","file":"refs.h","line":160,"args":[{"type":"git_reference *","comment":"The reference","name":"ref"}]},"git_odb_exists":{"return":{"type":"int","comment":""},"comments":"Determine if the given object can be found in the object database.\n\n@return\n- 1, if the object was found\n- 0, otherwise","file":"odb.h","line":148,"args":[{"type":"git_odb *","comment":"database to be searched for the given object.","name":"db"},{"type":"const git_oid *","comment":"the object to search for.","name":"id"}]},"git_reference_create_symbolic_f":{"return":{"type":"int","comment":"0 on success; error code otherwise"},"comments":"Create a new symbolic reference, overwriting an existing one with\nthe same name, if it exists.\n\nIf the new reference isn't a symbolic one, any pointers to the old\nreference become invalid.\n\nThe reference will be created in the repository and written\nto the disk.\n\nThis reference is owned by the repository and shall not\nbe free'd by the user.","file":"refs.h","line":71,"args":[{"type":"git_reference **","comment":"Pointer to the newly created reference","name":"ref_out"},{"type":"git_repository *","comment":"Repository where that reference will live","name":"repo"},{"type":"const char *","comment":"The name of the reference","name":"name"},{"type":"const char *","comment":"The target of the reference","name":"target"}]},"git_tag_message":{"return":{"type":"const char *","comment":"message of the tag"},"comments":"Get the message of a tag\n\n@param tag a previously loaded tag.","file":"tag.h","line":125,"args":[{"type":"git_tag *","comment":"","name":"t"}]},"git_signature_now":{"return":{"type":"git_signature *","comment":"the new sig, NULL on out of memory"},"comments":"Create a new action signature with a timestamp of 'now'. The\nsignature must be freed manually or using git_signature_free","file":"signature.h","line":52,"args":[{"type":"const char *","comment":"name of the person","name":"name"},{"type":"const char *","comment":"email of the person","name":"email"}]},"git_reference_owner":{"return":{"type":"git_repository *","comment":"a pointer to the repo"},"comments":"Get the repository where a reference resides","file":"refs.h","line":183,"args":[{"type":"git_reference *","comment":"The reference","name":"ref"}]},"git_reference_packall":{"return":{"type":"int","comment":"0 on success; error code otherwise"},"comments":"Pack all the loose references in the repository\n\nThis method will load into the cache all the loose\nreferences on the repository and update the\n`packed-refs` file with them.\n\nOnce the `packed-refs` file has been written properly,\nthe loose references will be removed from disk.\n\nWARNING: calling this method may invalidate any existing\nreferences previously loaded on the cache.","file":"refs.h","line":259,"args":[{"type":"git_repository *","comment":"Repository where the loose refs will be packed","name":"repo"}]},"git_strerror":{"return":{"type":"const char *","comment":"a string explaining the error code"},"comments":"strerror() for the Git library\n\nGet a string description for a given error code.\nNOTE: This method will be eventually deprecated in favor\nof the new `git_lasterror`.","file":"errors.h","line":135,"args":[{"type":"int","comment":"The error code to explain","name":"num"}]},"git_oid_pathfmt":{"return":{"type":"void","comment":""},"comments":"Format a git_oid into a loose-object path string.\n<p>\nThe resulting string is \"aa/...\", where \"aa\" is the first two\nhex digitis of the oid and \"...\" is the remaining 38 digits.","file":"oid.h","line":80,"args":[{"type":"char *","comment":"output hex string; must be pointing at the start of         the hex sequence and have at least the number of bytes         needed for an oid encoded in hex (41 bytes).  Only the         oid digits are written; a '\\\\0' terminator must be added         by the caller if it is required.","name":"str"},{"type":"const git_oid *","comment":"oid structure to format.","name":"oid"}]},"git_index_remove":{"return":{"type":"int","comment":"0 on success, otherwise an error code"},"comments":"Remove an entry from the index","file":"index.h","line":237,"args":[{"type":"git_index *","comment":"an existing index object","name":"index"},{"type":"int","comment":"position of the entry to remove","name":"position"}]},"git_blob_rawsize":{"return":{"type":"int","comment":"size on bytes"},"comments":"Get the size in bytes of the contents of a blob","file":"blob.h","line":86,"args":[{"type":"git_blob *","comment":"pointer to the blob","name":"blob"}]},"git_revwalk_sorting":{"return":{"type":"void","comment":""},"comments":"Change the sorting mode when iterating through the\nrepository's contents.\n\nChanging the sorting mode resets the walker.","file":"revwalk.h","line":158,"args":[{"type":"git_revwalk *","comment":"the walker being used for the traversal.","name":"walk"},{"type":"unsigned int","comment":"combination of GIT_SORT_XXX flags","name":"sort_mode"}]},"git_odb_backend_pack":{"return":{"type":"int","comment":""},"comments":"Streaming mode","file":"odb_backend.h","line":93,"args":[{"type":"git_odb_backend **","comment":"","name":"backend_out"},{"type":"const char *objects_dir); GIT_EXTERN(int) git_odb_backend_loose(git_odb_backend **","comment":"","name":"backend_out"},{"type":"const char *objects_dir); GIT_EXTERN(int) git_odb_backend_sqlite(git_odb_backend **","comment":"","name":"backend_out"},{"type":"const char *","comment":"","name":"sqlite_db"}]},"git_commit_close":{"return":{"type":"void","comment":""},"comments":"Close an open commit\n\nThis is a wrapper around git_object_close()\n\nIMPORTANT:\nIt *is* necessary to call this method when you stop\nusing a commit. Failure to do so will cause a memory leak.","file":"commit.h","line":56,"args":[{"type":"git_commit *","comment":"the commit to close","name":"commit"}]},"git_reference_rename_f":{"return":{"type":"int","comment":""},"comments":"Rename an existing reference, overwriting an existing one with the\nsame name, if it exists.\n\nThis method works for both direct and symbolic references.\nThe new name will be checked for validity and may be\nmodified into a normalized form.\n\nThe refernece will be immediately renamed in-memory\nand on disk.","file":"refs.h","line":234,"args":[{"type":"git_reference *","comment":"","name":"ref"},{"type":"const char *","comment":"","name":"new_name"}]},"git_tree_entry_byindex":{"return":{"type":"const git_tree_entry *","comment":"the tree entry; NULL if not found"},"comments":"Lookup a tree entry by its position in the tree","file":"tree.h","line":98,"args":[{"type":"git_tree *","comment":"a previously loaded tree.","name":"tree"},{"type":"int","comment":"the position in the entry list","name":"idx"}]},"git_tree_id":{"return":{"type":"const git_oid *","comment":"object identity for the tree."},"comments":"Get the id of a tree.","file":"tree.h","line":73,"args":[{"type":"git_tree *","comment":"a previously loaded tree.","name":"tree"}]},"git_tag_lookup":{"return":{"type":"int","comment":"0 on success; error code otherwise"},"comments":"Lookup a tag object from the repository.","file":"tag.h","line":42,"args":[{"type":"git_tag **","comment":"pointer to the looked up tag","name":"tag"},{"type":"git_repository *","comment":"the repo to use when locating the tag.","name":"repo"},{"type":"const git_oid *","comment":"identity of the tag to locate.","name":"id"}]},"git_commit_parent":{"return":{"type":"int","comment":"0 on success; error code otherwise"},"comments":"Get the specified parent of the commit.","file":"commit.h","line":156,"args":[{"type":"git_commit **","comment":"Pointer where to store the parent commit","name":"parent"},{"type":"git_commit *","comment":"a previously loaded commit.","name":"commit"},{"type":"unsigned int","comment":"the position of the parent (from 0 to `parentcount`)","name":"n"}]},"git_commit_id":{"return":{"type":"const git_oid *","comment":"object identity for the commit."},"comments":"Get the id of a commit.","file":"commit.h","line":73,"args":[{"type":"git_commit *","comment":"a previously loaded commit.","name":"commit"}]},"git_index_find":{"return":{"type":"int","comment":"an index >= 0 if found, -1 otherwise"},"comments":"Find the first index of any entries which point to given\npath in the Git index.","file":"index.h","line":164,"args":[{"type":"git_index *","comment":"an existing index object","name":"index"},{"type":"const char *","comment":"path to search","name":"path"}]},"git_lasterror":{"return":{"type":"const char *","comment":"a string explaining the error"},"comments":"Return a detailed error string with the latest error\nthat occurred in the library.","file":"errors.h","line":128,"args":[{"type":"","comment":"","name":"void"}]},"git_commit_parent_oid":{"return":{"type":"const git_oid *","comment":"the id of the parent, NULL on error."},"comments":"Get the oid of a specified parent for a commit. This is different from\n`git_commit_parent`, which will attempt to load the parent commit from\nthe ODB.","file":"commit.h","line":166,"args":[{"type":"git_commit *","comment":"a previously loaded commit.","name":"commit"},{"type":"unsigned int","comment":"the position of the parent (from 0 to `parentcount`)","name":"n"}]},"git_tag_target_oid":{"return":{"type":"const git_oid *","comment":"pointer to the OID"},"comments":"Get the OID of the tagged object of a tag\n\n@param tag a previously loaded tag.","file":"tag.h","line":93,"args":[{"type":"git_tag *","comment":"","name":"t"}]},"git_odb_read_header":{"return":{"type":"int","comment":""},"comments":"Read the header of an object from the database, without\nreading its full contents.\n\nThe header includes the length and the type of an object.\n\nNote that most backends do not support reading only the header\nof an object, so the whole object will be read and then the\nheader will be returned.\n\n@return\n- GIT_SUCCESS if the object was read;\n- GIT_ENOTFOUND if the object is not in the database.","file":"odb.h","line":128,"args":[{"type":"size_t *","comment":"pointer where to store the length","name":"len_p"},{"type":"git_otype *","comment":"pointer where to store the type","name":"type_p"},{"type":"git_odb *","comment":"database to search for the object in.","name":"db"},{"type":"const git_oid *","comment":"identity of the object to read.","name":"id"}]},"git_repository_open":{"return":{"type":"int","comment":"0 on success; error code otherwise"},"comments":"Open a git repository.\n\nThe 'path' argument must point to an existing git repository\nfolder, e.g.\n\n/path/to/my_repo/.git/\t(normal repository)\nobjects/\nindex\nHEAD\n\n/path/to/bare_repo/\t\t(bare repository)\nobjects/\nindex\nHEAD\n\nThe method will automatically detect if 'path' is a normal\nor bare repository or fail is 'path' is neither.","file":"repository.h","line":41,"args":[{"type":"git_repository **","comment":"pointer to the repo which will be opened","name":"repository"},{"type":"const char *","comment":"the path to the repository","name":"path"}]},"git_index_read":{"return":{"type":"int","comment":"0 on success, otherwise an error code"},"comments":"Update the contents of an existing index object in memory\nby reading from the hard disk.","file":"index.h","line":146,"args":[{"type":"git_index *","comment":"an existing index object","name":"index"}]},"git_signature_free":{"return":{"type":"void","comment":""},"comments":"Free an existing signature","file":"signature.h","line":72,"args":[{"type":"git_signature *","comment":"signature to free","name":"sig"}]},"git_commit_author":{"return":{"type":"const git_signature *","comment":"the author of a commit"},"comments":"Get the author of a commit.","file":"commit.h","line":121,"args":[{"type":"git_commit *","comment":"a previously loaded commit.","name":"commit"}]},"git_odb_write":{"return":{"type":"int","comment":"0 on success; error code otherwise"},"comments":"Write an object directly into the ODB\n\nThis method writes a full object straight into the ODB.\nFor most cases, it is preferred to write objects through a write\nstream, which is both faster and less memory intensive, specially\nfor big objects.\n\nThis method is provided for compatibility with custom backends\nwhich are not able to support streaming writes","file":"odb.h","line":159,"args":[{"type":"git_oid *","comment":"pointer to store the OID result of the write","name":"oid"},{"type":"git_odb *","comment":"object database where to store the object","name":"odb"},{"type":"const void *","comment":"buffer with the data to storr","name":"data"},{"type":"size_t","comment":"size of the buffer","name":"len"},{"type":"git_otype","comment":"type of the data to store","name":"type"}]},"git_reference_listall":{"return":{"type":"int","comment":"0 on success; error code otherwise"},"comments":"Fill a list with all the references that can be found\nin a repository.\n\nThe listed references may be filtered by type, or using\na bitwise OR of several types. Use the magic value\n`GIT_REF_LISTALL` to obtain all references, including\npacked ones.\n\nThe string array will be filled with the names of all\nreferences; these values are owned by the user and\nshould be free'd manually when no longer needed, using\n`git_strarray_free`.","file":"refs.h","line":277,"args":[{"type":"git_strarray *","comment":"Pointer to a git_strarray structure where   the reference names will be stored","name":"array"},{"type":"git_repository *","comment":"Repository where to find the refs","name":"repo"},{"type":"unsigned int","comment":"Filtering flags for the reference   listing.","name":"list_flags"}]},"git_odb_open_wstream":{"return":{"type":"int","comment":"0 if the stream was created; error code otherwise"},"comments":"Open a stream to write an object into the ODB\n\nThe type and final length of the object must be specified\nwhen opening the stream.\n\nThe returned stream will be of type `GIT_STREAM_WRONLY` and\nwill have the following methods:\n\n- stream->write: write `n` bytes into the stream\n- stream->finalize_write: close the stream and store the object in\nthe odb\n- stream->free: free the stream\n\nThe streaming write won't be effective until `stream->finalize_write`\nis called and returns without an error\n\nThe stream must always be free'd or will leak memory.\n\n@see git_odb_stream","file":"odb.h","line":179,"args":[{"type":"git_odb_stream **","comment":"pointer where to store the stream","name":"stream"},{"type":"git_odb *","comment":"object database where the stream will write","name":"db"},{"type":"size_t","comment":"final size of the object that will be written","name":"size"},{"type":"git_otype","comment":"type of the object that will be written","name":"type"}]},"git_repository_path":{"return":{"type":"const char *","comment":"absolute path to the git directory"},"comments":"Get the normalized path to the git repository.","file":"repository.h","line":197,"args":[{"type":"git_repository *","comment":"a repository object","name":"repo"}]},"git_tag_type":{"return":{"type":"git_otype","comment":"type of the tagged object"},"comments":"Get the type of a tag's tagged object\n\n@param tag a previously loaded tag.","file":"tag.h","line":101,"args":[{"type":"git_tag *","comment":"","name":"t"}]},"git_odb_read":{"return":{"type":"int","comment":""},"comments":"Read an object from the database.\n\nThis method queries all avaiable ODB backends\ntrying to read the given OID.\n\nThe returned object is reference counted and\ninternally cached, so it should be closed\nby the user once it's no longer in use.\n\n@return\n- GIT_SUCCESS if the object was read;\n- GIT_ENOTFOUND if the object is not in the database.","file":"odb.h","line":109,"args":[{"type":"git_odb_object **","comment":"pointer where to store the read object","name":"out"},{"type":"git_odb *","comment":"database to search for the object in.","name":"db"},{"type":"const git_oid *","comment":"identity of the object to read.","name":"id"}]},"git_reference_set_oid":{"return":{"type":"int","comment":"0 on success; error code otherwise"},"comments":"Set the OID target of a reference.\n\nThe reference must be a direct reference, otherwise\nthis method will fail.\n\nThe reference will be automatically updated in\nmemory and on disk.\n\n@param target The new target OID for the reference","file":"refs.h","line":206,"args":[{"type":"git_reference *","comment":"The reference","name":"ref"},{"type":"const git_oid *","comment":"","name":"id"}]},"git_index_open_bare":{"return":{"type":"int","comment":"0 on success; error code otherwise"},"comments":"Create a new Git index object as a memory representation\nof the Git index file in 'index_path', without a repository\nto back it.\n\nSince there is no ODB behind this index, any Index methods\nwhich rely on the ODB (e.g. index_add) will fail with the\nGIT_EBAREINDEX error code.","file":"index.h","line":105,"args":[{"type":"git_index **","comment":"the pointer for the new index","name":"index"},{"type":"const char *","comment":"the path to the index file in disk","name":"index_path"}]},"git_tree_entry_name":{"return":{"type":"const char *","comment":"the name of the file"},"comments":"Get the filename of a tree entry","file":"tree.h","line":115,"args":[{"type":"const git_tree_entry *","comment":"a tree entry","name":"entry"}]},"defined":{"return":{"type":"*          http:","comment":""},"comments":"","file":"thread-utils.h","line":31,"args":[{"type":"__SUNPRO_C) || \\ defined(__SUNPRO_CC) || \\ defined(__xlc__) || \\ defined(__xlC__) defined(_WIN32_CE) || \\","comment":"","name":"defined(__BORLANDC__"}]},"git_object__size":{"return":{"type":"size_t","comment":"size in bytes of the object"},"comments":"Get the size in bytes for the structure which\nacts as an in-memory representation of any given\nobject type.\n\nFor all the core types, this would the equivalent\nof calling `sizeof(git_commit)` if the core types\nwere not opaque on the external API.","file":"object.h","line":130,"args":[{"type":"git_otype","comment":"object type to get its size","name":"type"}]},"git_commit_lookup":{"return":{"type":"int","comment":"0 on success; error code otherwise"},"comments":"Lookup a commit object from a repository.","file":"commit.h","line":42,"args":[{"type":"git_commit **","comment":"pointer to the looked up commit","name":"commit"},{"type":"git_repository *","comment":"the repo to use when locating the commit.","name":"repo"},{"type":"const git_oid *","comment":"identity of the commit to locate.  If the object is         an annotated tag it will be peeled back to the commit.","name":"id"}]},"git_reference_listcb":{"return":{"type":"int","comment":"0 on success; error code otherwise"},"comments":"List all the references in the repository, calling a custom\ncallback for each one.\n\nThe listed references may be filtered by type, or using\na bitwise OR of several types. Use the magic value\n`GIT_REF_LISTALL` to obtain all references, including\npacked ones.\n\nThe `callback` function will be called for each of the references\nin the repository, and will receive the name of the reference and\nthe `payload` value passed to this method.","file":"refs.h","line":301,"args":[{"type":"git_repository *","comment":"Repository where to find the refs","name":"repo"},{"type":"unsigned int","comment":"Filtering flags for the reference   listing.","name":"list_flags"},{"type":"int(*)(const char *, void *)","comment":"Function which will be called for every listed ref","name":"callback"},{"type":"void *","comment":"Additional data to pass to the callback","name":"payload"}]},"git_object_owner":{"return":{"type":"git_repository *","comment":"the repository who owns this object"},"comments":"Get the repository that owns this object","file":"object.h","line":77,"args":[{"type":"const git_object *","comment":"the object","name":"obj"}]},"git_commit_message_short":{"return":{"type":"const char *","comment":"the short message of a commit"},"comments":"Get the short (one line) message of a commit.","file":"commit.h","line":81,"args":[{"type":"git_commit *","comment":"a previously loaded commit.","name":"commit"}]},"git_oid_fmt":{"return":{"type":"void","comment":""},"comments":"Format a git_oid into a hex string.","file":"oid.h","line":69,"args":[{"type":"char *","comment":"output hex string; must be pointing at the start of         the hex sequence and have at least the number of bytes         needed for an oid encoded in hex (40 bytes).  Only the         oid digits are written; a '\\\\0' terminator must be added         by the caller if it is required.","name":"str"},{"type":"const git_oid *","comment":"oid structure to format.","name":"oid"}]},"git_commit_tree_oid":{"return":{"type":"const git_oid *","comment":"the id of tree pointed to by commit."},"comments":"Get the id of the tree pointed to by a commit. This differs from\n`git_commit_tree` in that no attempts are made to fetch an object\nfrom the ODB.","file":"commit.h","line":138,"args":[{"type":"git_commit *","comment":"a previously loaded commit.","name":"commit"}]},"git_repository_is_empty":{"return":{"type":"int","comment":"1 if the repository is empty, 0 if it isn't, error code  if the repository is corrupted"},"comments":"Check if a repository is empty\n\nAn empty repository has just been initialized and contains\nno commits.","file":"repository.h","line":185,"args":[{"type":"git_repository *","comment":"Repo to test","name":"repo"}]},"git_reference_delete":{"return":{"type":"int","comment":""},"comments":"Delete an existing reference\n\nThis method works for both direct and symbolic references.\n\nThe reference will be immediately removed on disk and from\nmemory. The given reference pointer will no longer be valid.","file":"refs.h","line":248,"args":[{"type":"git_reference *","comment":"","name":"ref"}]},"git_odb_object_type":{"return":{"type":"git_otype","comment":"the type"},"comments":"Return the type of an ODB object","file":"odb.h","line":292,"args":[{"type":"git_odb_object *","comment":"the object","name":"object"}]},"git_odb_object_size":{"return":{"type":"size_t","comment":"the size"},"comments":"Return the size of an ODB object\n\nThis is the real size of the `data` buffer, not the\nactual size of the object.","file":"odb.h","line":281,"args":[{"type":"git_odb_object *","comment":"the object","name":"object"}]},"git_odb_object_close":{"return":{"type":"void","comment":""},"comments":"Close an ODB object\n\nThis method must always be called once a `git_odb_object` is no\nlonger needed, otherwise memory will leak.","file":"odb.h","line":248,"args":[{"type":"git_odb_object *","comment":"object to close","name":"object"}]},"git_blob_create_frombuffer":{"return":{"type":"int","comment":"0 on success; error code otherwise"},"comments":"Write an in-memory buffer to the ODB as a blob","file":"blob.h","line":108,"args":[{"type":"git_oid *","comment":"return the oid of the written blob","name":"oid"},{"type":"git_repository *","comment":"repository where to blob will be written","name":"repo"},{"type":"const void *","comment":"data to be written into the blob","name":"buffer"},{"type":"size_t","comment":"length of the data","name":"len"}]},"git_oid_to_string":{"return":{"type":"char *","comment":"the out buffer pointer, assuming no input parameter          errors, otherwise a pointer to an empty string."},"comments":"Format a git_oid into a buffer as a hex format c-string.\n<p>\nIf the buffer is smaller than GIT_OID_HEXSZ+1, then the resulting\noid c-string will be truncated to n-1 characters. If there are\nany input parameter errors (out == NULL, n == 0, oid == NULL),\nthen a pointer to an empty string is returned, so that the return\nvalue can always be printed.","file":"oid.h","line":103,"args":[{"type":"char *","comment":"the buffer into which the oid string is output.","name":"out"},{"type":"size_t","comment":"the size of the out buffer.","name":"n"},{"type":"const git_oid *","comment":"the oid structure to format.","name":"oid"}]},"git_index_entrycount":{"return":{"type":"unsigned int","comment":"integer of count of current entries"},"comments":"Get the count of entries currently in the index","file":"index.h","line":259,"args":[{"type":"git_index *","comment":"an existing index object","name":"index"}]},"git_tag_create_f":{"return":{"type":"int","comment":"0 on success; error code otherwise.  A tag object is written to the ODB, and a proper reference  is written in the /refs/tags folder, pointing to it"},"comments":"Create a new tag in the repository from an OID\nand overwrite an already existing tag reference, if any.","file":"tag.h","line":206,"args":[{"type":"git_oid *","comment":"Pointer where to store the OID of the  newly created tag","name":"oid"},{"type":"git_repository *","comment":"Repository where to store the tag","name":"repo"},{"type":"const char *","comment":"Name for the tag; this name is validated  for consistency.","name":"tag_name"},{"type":"const git_oid *","comment":"OID to which this tag points; note that no  validation is done on this OID. Use the _fo version of this  method to assure a proper object is being tagged","name":"target"},{"type":"git_otype","comment":"Type of the tagged OID; note that no  validation is performed here either","name":"target_type"},{"type":"const git_signature *","comment":"Signature of the tagger for this tag, and   of the tagging time","name":"tagger"},{"type":"const char *","comment":"Full message for this tag","name":"message"}]},"git_oid_mkraw":{"return":{"type":"void","comment":""},"comments":"Copy an already raw oid into a git_oid structure.","file":"oid.h","line":62,"args":[{"type":"git_oid *","comment":"oid structure the result is written into.","name":"out"},{"type":"const unsigned char *","comment":"the raw input bytes to be copied.","name":"raw"}]},"git_reference_rename":{"return":{"type":"int","comment":""},"comments":"Rename an existing reference\n\nThis method works for both direct and symbolic references.\nThe new name will be checked for validity and may be\nmodified into a normalized form.\n\nThe refernece will be immediately renamed in-memory\nand on disk.","file":"refs.h","line":221,"args":[{"type":"git_reference *","comment":"","name":"ref"},{"type":"const char *","comment":"","name":"new_name"}]},"git_revwalk_reset":{"return":{"type":"void","comment":""},"comments":"Reset the revision walker for reuse.\n\nThis will clear all the pushed and hidden commits, and\nleave the walker in a blank state (just like at\ncreation) ready to receive new commit pushes and\nstart a new walk.\n\nThe revision walk is automatically reset when a walk\nis over.","file":"revwalk.h","line":90,"args":[{"type":"git_revwalk *","comment":"handle to reset.","name":"walker"}]},"git_object_close":{"return":{"type":"void","comment":""},"comments":"Close an open object\n\nThis method instructs the library to close an existing\nobject; note that git_objects are owned and cached by the repository\nso the object may or may not be freed after this library call,\ndepending on how agressive is the caching mechanism used\nby the repository.\n\nIMPORTANT:\nIt *is* necessary to call this method when you stop using\nan object. Failure to do so will cause a memory leak.","file":"object.h","line":85,"args":[{"type":"git_object *","comment":"the object to close","name":"object"}]}}}